import os
import asyncio
from fastapi import FastAPI, Request
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from hotmart_api import obtener_productos, filtrar_productos, afiliar_producto

app = FastAPI()

# =====================================================
# üîÅ Tarea principal del bot investigador
# =====================================================
async def investigar_hotmart():
    print("üîé Iniciando investigaci√≥n de productos...")

    try:
        productos = await obtener_productos()
        print(f"üì¶ Productos encontrados: {len(productos)}")

        seleccionados = filtrar_productos(productos)
        print(f"‚úÖ Productos filtrados: {len(seleccionados)}")

        for producto in seleccionados:
            producto_id = producto["id"]
            nombre = producto["nombre"]
            comision = producto["comision"]
            ventas = producto["ventas"]

            print(f"‚û°Ô∏è Producto elegido: {nombre} | Comisi√≥n: {comision} | Ventas: {ventas}")

            # Afiliaci√≥n autom√°tica
            afiliado = await afiliar_producto(producto_id)
            if afiliado:
                print(f"ü§ù Afiliado al producto {producto_id} ({nombre})")

    except Exception as e:
        print(f"‚ùå Error en investigaci√≥n: {e}")

# =====================================================
# ‚è∞ Scheduler para ejecutar la investigaci√≥n autom√°ticamente
# =====================================================
scheduler = AsyncIOScheduler()
scheduler.add_job(investigar_hotmart, "interval", hours=12)  # 2 veces al d√≠a
scheduler.start()

# =====================================================
# üåê Endpoint ra√≠z
# =====================================================
@app.get("/")
async def root():
    return {"status": "Bot Investigador funcionando üöÄ"}

# =====================================================
# üì© Webhook (para Telegram u otros si se necesita despu√©s)
# =====================================================
@app.post("/webhook/{token}")
async def telegram_webhook(token: str, request: Request):
    data = await request.json()
    print(f"üì© Webhook recibido: {data}")
    return {"ok": True}
